pipeline {
  agent any

  environment {
    HELM_RELEASE = 'myapp'
    NAMESPACE = 'default'
    NOTIFY_EMAIL = 'devops.akash01@gmail.com'
  }

  stages {
    stage('Fetch Terraform & CI Outputs') {
      steps {
        copyArtifacts(projectName: 'Terraform-Infra-Pipeline', selector: lastSuccessful())
        copyArtifacts(projectName: 'NodeApp - CI/master', selector: lastSuccessful())

        script {
          def tfData = readJSON file: 'tf_outputs.json'
          def ciData = readJSON file: 'image_info.json'

          env.AWS_REGION = "us-east-1"
          env.CLUSTER_NAME = tfData.eks_cluster_name.value
          env.IMAGE_NAME = ciData.image

          echo "Using image: ${env.IMAGE_NAME}"
          echo "Using EKS Cluster: ${env.CLUSTER_NAME} in Region: ${env.AWS_REGION}"
        }
      }
    }

    stage('Configure Kubeconfig') {
      steps {
        sh '''
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
        '''
      }
    }

    stage('Install ALB Ingress Controller') {
  steps {
    script {
      sh '''
        echo "Installing AWS Load Balancer Controller..."

        # Download IAM policy
        curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json

        # Create IAM policy if not already present (optional logic)
        aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy \
          --policy-document file://iam-policy.json || echo "Policy may already exist"

        # Associate OIDC provider if not already present (optional logic)
        eksctl utils associate-iam-oidc-provider \
          --region $AWS_REGION \
          --cluster $CLUSTER_NAME \
          --approve

        # Create IAM Service Account with correct policy (IRSA)
        eksctl create iamserviceaccount \
          --cluster $CLUSTER_NAME \
          --namespace kube-system \
          --name aws-load-balancer-controller \
          --attach-policy-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/AWSLoadBalancerControllerIAMPolicy \
          --approve \
          --override-existing-serviceaccounts

        # Install the CRDs and Helm chart for the controller
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update

        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName=$CLUSTER_NAME \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region=$AWS_REGION \
          --set vpcId=$(aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION --query "cluster.resourcesVpcConfig.vpcId" --output text) \
          --set image.tag="v2.6.2"
      '''
    }
  }
}


    stage('Deploy with Helm') {
      steps {
        script {
          try {
            sh """
              helm upgrade --install ${env.HELM_RELEASE} ./helm/myapp \
                --set image.repository=${env.IMAGE_NAME.split(":")[0]} \
                --set image.tag=${env.IMAGE_NAME.split(":")[1]} \
                --namespace ${env.NAMESPACE}
            """
            echo "Helm deployment succeeded."
          } catch (err) {
            echo "Helm deployment failed: ${err}"
            echo "Attempting rollback to previous release..."
            sh "helm rollback ${env.HELM_RELEASE}"
            error("Deployment failed and was rolled back.")
          }
        }
      }
    }

    stage('Test Helm Release') {
      steps {
        script {
          try {
            sh "helm test ${env.HELM_RELEASE} --timeout 60s"
            echo "Helm test passed."
          } catch (err) {
            echo "Helm test failed. Rolling back..."
            sh "helm rollback ${env.HELM_RELEASE}"
            error("Helm test failed and rollback triggered.")
          }
        }
      }
    }
  }

  /*post {
    success {
      mail to: "${env.NOTIFY_EMAIL}",
           subject: "Jenkins CD Pipeline: Deployment Successful",
           body: """
Deployment completed successfully!

EKS Cluster: ${env.CLUSTER_NAME}
Region: ${env.AWS_REGION}
Image: ${env.IMAGE_NAME}
"""
    }
    failure {
      mail to: "${env.NOTIFY_EMAIL}",
           subject: "Jenkins CD Pipeline: Deployment Failed",
           body: """
Deployment failed and rollback (if any) was triggered.

Please check the Jenkins console for details.

EKS Cluster: ${env.CLUSTER_NAME}
Region: ${env.AWS_REGION}
Image: ${env.IMAGE_NAME}
"""
    }
  }*/
}
